definitions:
  models.AuthReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.AuthResp:
    properties:
      employee:
        $ref: '#/definitions/models.Employee'
      token:
        type: string
    type: object
  models.ByCompany:
    properties:
      company_id:
        type: string
      company_name:
        type: string
      logistics:
        items:
          $ref: '#/definitions/models.LogisticResponse'
        type: array
    type: object
  models.Cargo:
    properties:
      cargo_id:
        type: string
      cost:
        type: integer
      created_at:
        type: string
      delivery_time:
        type: string
      employee_id:
        type: string
      free_miles:
        type: integer
      from:
        type: string
      id:
        type: string
      loaded_miles:
        type: integer
      pick_up_time:
        type: string
      provider:
        type: string
      rate:
        type: number
      to:
        type: string
      updated_at:
        type: string
    type: object
  models.Company:
    properties:
      address:
        type: string
      created_at:
        type: string
      dot:
        type: integer
      drivers_number:
        type: integer
      id:
        type: string
      mc:
        type: integer
      name:
        type: string
      number:
        type: string
      scac:
        type: string
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  models.Driver:
    properties:
      birthday:
        type: string
      company_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      mail:
        type: string
      name:
        type: string
      phone_number:
        type: string
      position:
        type: string
      start_date:
        type: string
      surname:
        type: string
      truck_number:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.Employee:
    properties:
      access_level:
        type: integer
      birthday:
        type: string
      company:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      logo_id:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      position:
        type: string
      start_date:
        type: string
      surname:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.GetAllCompaniesResp:
    properties:
      companies:
        items:
          $ref: '#/definitions/models.Company'
        type: array
      count:
        type: integer
    type: object
  models.GetAllDriversResp:
    properties:
      count:
        type: integer
      drivers:
        items:
          $ref: '#/definitions/models.Driver'
        type: array
    type: object
  models.GetAllEmployeesResp:
    properties:
      count:
        type: integer
      employees:
        items:
          $ref: '#/definitions/models.Employee'
        type: array
    type: object
  models.GetAllHistoryResp:
    properties:
      count:
        type: integer
      histories:
        items:
          $ref: '#/definitions/models.History'
        type: array
    type: object
  models.GetAllLogisticsResp:
    properties:
      companies:
        items:
          $ref: '#/definitions/models.ByCompany'
        type: array
      count:
        type: integer
    type: object
  models.GetAllPerformancesResp:
    properties:
      count:
        type: integer
      performances:
        items:
          $ref: '#/definitions/models.Performance'
        type: array
    type: object
  models.GetAllTransResp:
    properties:
      count:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
    type: object
  models.GetOverview:
    properties:
      companies:
        items:
          properties:
            freeDrivers:
              type: integer
            id:
              type: string
            name:
              type: string
            notWorking:
              type: integer
            occupiedDrivers:
              type: integer
            willBeSoonDrivers:
              type: integer
          type: object
        type: array
    type: object
  models.History:
    properties:
      createdAt:
        type: string
      driverName:
        type: string
      employeeId:
        type: string
      fromCargo:
        $ref: '#/definitions/models.JSONBCargo'
      fromLogistic:
        $ref: '#/definitions/models.JSONBLogistic'
      id:
        type: string
      logisticId:
        type: string
      toCargo:
        $ref: '#/definitions/models.JSONBCargo'
      toLogistic:
        $ref: '#/definitions/models.JSONBLogistic'
      updatedAt:
        type: string
    type: object
  models.JSONBCargo:
    properties:
      cargo:
        $ref: '#/definitions/models.Cargo'
    type: object
  models.JSONBLogistic:
    properties:
      logistic:
        $ref: '#/definitions/models.Logistic'
    type: object
  models.Logistic:
    properties:
      cargo_id:
        type: string
      created_at:
        type: string
      driver_id:
        type: string
      emoji:
        type: string
      id:
        type: string
      location:
        type: string
      notion:
        type: string
      post:
        type: boolean
      st_time:
        type: string
      state:
        type: string
      status:
        type: string
      update_time:
        type: string
      updated_at:
        type: string
    type: object
  models.LogisticResponse:
    properties:
      cargo_id:
        type: string
      company_id:
        type: string
      company_name:
        type: string
      countdown:
        type: string
      driver_id:
        type: string
      driver_name:
        type: string
      driver_position:
        type: string
      driver_surname:
        type: string
      driver_type:
        type: string
      emoji:
        type: string
      id:
        type: string
      location:
        type: string
      notion:
        type: string
      post:
        type: boolean
      st_time:
        type: string
      state:
        type: string
      status:
        type: string
      update_time:
        type: string
    type: object
  models.Performance:
    properties:
      company:
        type: string
      created_at:
        type: string
      disputed_by:
        type: string
      id:
        type: string
      load_id:
        type: string
      reason:
        type: string
      section:
        type: string
      status:
        type: string
      updated_at:
        type: string
      whose_fault:
        type: string
    type: object
  models.ResponseError:
    properties:
      error_code:
        type: string
      error_message:
        type: string
    type: object
  models.ResponseId:
    properties:
      id:
        type: string
    type: object
  models.ResponseSuccess:
    properties:
      message:
        type: string
    type: object
  models.Transaction:
    properties:
      cargo_id:
        type: string
      cost:
        type: integer
      created_at:
        type: string
      delivery_time:
        type: string
      driver:
        $ref: '#/definitions/models.Driver'
      driver_id:
        type: string
      employee_id:
        type: string
      from:
        type: string
      id:
        type: string
      loaded_miles:
        type: integer
      provider:
        type: string
      pu_time:
        type: string
      rate:
        type: number
      success:
        type: boolean
      to:
        type: string
      total_miles:
        type: integer
      updated_at:
        type: string
    type: object
  swag.CancelLogistic:
    properties:
      cancel:
        type: boolean
      company:
        type: string
      logistic_id:
        type: string
      reason:
        type: string
      section:
        type: string
      status:
        type: string
      whose_fault:
        type: string
    type: object
  swag.CreateUpdateCompany:
    properties:
      address:
        type: string
      dot:
        type: integer
      mc:
        type: integer
      name:
        type: string
      number:
        type: string
      scac:
        type: string
      start_date:
        type: string
    type: object
  swag.CreateUpdateDriver:
    properties:
      birthday:
        type: string
      company_id:
        type: string
      mail:
        type: string
      name:
        type: string
      phone_number:
        type: string
      position:
        type: string
      start_date:
        type: string
      surname:
        type: string
      truck_number:
        type: string
      type:
        type: string
    type: object
  swag.CreateUpdateEmployee:
    properties:
      access_level:
        type: integer
      birthday:
        type: string
      company:
        type: string
      email:
        type: string
      logo_id:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      position:
        type: string
      start_date:
        type: string
      surname:
        type: string
      username:
        type: string
    type: object
  swag.CreateUpdateLogistic:
    properties:
      cargo_id:
        type: string
      driver_id:
        type: string
      location:
        type: string
      notion:
        type: string
      post:
        type: boolean
      st_time:
        type: string
      status:
        type: string
    type: object
  swag.CreateUpdatePerformance:
    properties:
      company:
        type: string
      disputed_by:
        type: string
      load_id:
        type: string
      reason:
        type: string
      section:
        type: string
      status:
        type: string
      whose_fault:
        type: string
    type: object
  swag.CreateUpdateTransaction:
    properties:
      cargo_id:
        type: string
      cost:
        type: integer
      delivery_time:
        type: string
      driver_id:
        type: string
      employee_id:
        type: string
      from:
        type: string
      loaded_miles:
        type: integer
      provider:
        type: string
      pu_time:
        type: string
      rate:
        type: number
      success:
        type: boolean
      to:
        type: string
      total_miles:
        type: integer
    type: object
  swag.TerminateLogistic:
    properties:
      logistic_id:
        type: string
      success:
        type: boolean
    type: object
  swag.UpdateLogisticWithCargo:
    properties:
      cargo_id:
        type: string
      cost:
        type: integer
      create:
        type: boolean
      delivery_time:
        type: string
      employee_id:
        type: string
      free_miles:
        type: integer
      from:
        type: string
      load_id:
        type: string
      loaded_miles:
        type: integer
      location:
        type: string
      logistic_id:
        type: string
      notion:
        type: string
      pick_up_time:
        type: string
      post:
        type: boolean
      provider:
        type: string
      rate:
        type: number
      st_time:
        type: string
      status:
        type: string
      to:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/cancel_late_logistics:
    post:
      consumes:
      - application/json
      description: API for canceling or marking late logistic record
      parameters:
      - description: Logistic data
        in: body
        name: logistic
        required: true
        schema:
          $ref: '#/definitions/swag.CancelLogistic'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Cancel or late logistics
      tags:
      - logistic
  /v1/companies:
    get:
      description: API for retrieving all companies with pagination and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of companies per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllCompaniesResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all companies
      tags:
      - company
    post:
      consumes:
      - application/json
      description: API for creating a new company
      parameters:
      - description: Company data
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseId'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a company
      tags:
      - company
  /v1/companies/{company_id}:
    delete:
      description: API for deleting a company
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a company
      tags:
      - company
    get:
      description: API for retrieving a company by ID
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Company'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a company by ID
      tags:
      - company
    put:
      consumes:
      - application/json
      description: API for updating a company
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      - description: Company data
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a company
      tags:
      - company
  /v1/drivers:
    get:
      description: API for retrieving all drivers with pagination and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of drivers per page
        in: query
        name: limit
        type: integer
      - description: Type of driver
        in: query
        name: type
        type: string
      - description: Position of driver
        in: query
        name: position
        type: string
      - description: Company id
        in: query
        name: company_id
        type: string
      - description: Drivers Name
        in: query
        name: name
        type: string
      - description: Truck Number
        in: query
        name: truck_number
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllDriversResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all drivers
      tags:
      - driver
    post:
      consumes:
      - application/json
      description: API for creating a new driver
      parameters:
      - description: Driver data
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateDriver'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseId'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a driver
      tags:
      - driver
  /v1/drivers/{driver_id}:
    delete:
      description: API for deleting a driver
      parameters:
      - description: Driver ID
        in: path
        name: driver_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a driver
      tags:
      - driver
    get:
      description: API for retrieving a driver by ID
      parameters:
      - description: Driver ID
        in: path
        name: driver_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Driver'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a driver by ID
      tags:
      - driver
    put:
      consumes:
      - application/json
      description: API for updating a driver
      parameters:
      - description: Driver ID
        in: path
        name: driver_id
        required: true
        type: string
      - description: Driver data
        in: body
        name: driver
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateDriver'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a driver
      tags:
      - driver
  /v1/employees:
    get:
      description: API for retrieving all employees with pagination and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of employees per page
        in: query
        name: limit
        type: integer
      - description: Employee name
        in: query
        name: name
        type: string
      - description: Employee position
        in: query
        name: position
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllEmployeesResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all employees
      tags:
      - employee
    post:
      consumes:
      - application/json
      description: API for creating a new employee
      parameters:
      - description: Employee data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateEmployee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseId'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create an employee
      tags:
      - employee
  /v1/employees/{employee_id}:
    delete:
      description: API for deleting an employee
      parameters:
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete an employee
      tags:
      - employee
    get:
      description: API for retrieving an employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get an employee by ID
      tags:
      - employee
    put:
      consumes:
      - application/json
      description: API for updating an employee
      parameters:
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      - description: Employee data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateEmployee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update an employee
      tags:
      - employee
  /v1/histories:
    get:
      description: API for retrieving all history records with pagination and filters
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllHistoryResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all history records
      tags:
      - history
  /v1/histories/{history_id}:
    get:
      description: API for retrieving a single history record by ID
      parameters:
      - description: History ID
        in: path
        name: history_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.History'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a history record by ID
      tags:
      - history
  /v1/login:
    post:
      consumes:
      - application/json
      description: API for login
      parameters:
      - description: Employee data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.AuthReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Log in
      tags:
      - auth
  /v1/logistics:
    get:
      description: API for retrieving all logistic records with pagination and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of logistics per page
        in: query
        name: limit
        type: integer
      - description: Post
        in: query
        name: post
        type: boolean
      - description: Driver Type
        in: query
        name: type
        type: string
      - description: Driver Position
        in: query
        name: position
        type: string
      - description: Driver Name
        in: query
        name: name
        type: string
      - description: Status
        in: query
        name: status
        type: string
      - description: Location
        in: query
        name: location
        type: string
      - description: state
        in: query
        name: state
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllLogisticsResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all logistic records
      tags:
      - logistic
    post:
      consumes:
      - application/json
      description: API for creating a new logistic record
      parameters:
      - description: Logistic data
        in: body
        name: logistic
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateLogistic'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseId'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a logistic record
      tags:
      - logistic
  /v1/logistics/{logistic_id}:
    delete:
      description: API for deleting a logistic record
      parameters:
      - description: Logistic ID
        in: path
        name: logistic_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a logistic record
      tags:
      - logistic
    get:
      description: API for retrieving a logistic record by ID
      parameters:
      - description: Logistic ID
        in: path
        name: logistic_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Logistic'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a logistic record by ID
      tags:
      - logistic
    put:
      consumes:
      - application/json
      description: API for updating a logistic record
      parameters:
      - description: Logistic ID
        in: path
        name: logistic_id
        required: true
        type: string
      - description: Logistic data
        in: body
        name: logistic
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateLogistic'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a logistic record
      tags:
      - logistic
  /v1/logistics/overview:
    get:
      consumes:
      - application/json
      description: API to get an overview of driver statuses by company
      produces:
      - application/json
      responses:
        "200":
          description: Overview data
          schema:
            $ref: '#/definitions/models.GetOverview'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get driver overview
      tags:
      - logistic
  /v1/logistics_with_cargo/{logistic_id}:
    put:
      consumes:
      - application/json
      description: API for updating a logistic record with a cargo
      parameters:
      - description: Logistic ID
        in: path
        name: logistic_id
        required: true
        type: string
      - description: Logistic data
        in: body
        name: logistic
        required: true
        schema:
          $ref: '#/definitions/swag.UpdateLogisticWithCargo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a logistic record with a cargo
      tags:
      - logistic
  /v1/performances:
    get:
      description: API for retrieving all performances with pagination and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of performances per page
        in: query
        name: limit
        type: integer
      - description: Company
        in: query
        name: company
        type: string
      - description: Whose fault
        in: query
        name: whose_fault
        type: string
      - description: Status
        in: query
        name: status
        type: string
      - description: Section
        in: query
        name: section
        type: string
      - description: Disputed by
        in: query
        name: disputed_by
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllPerformancesResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all performances
      tags:
      - performance
    post:
      consumes:
      - application/json
      description: API for creating a new performance
      parameters:
      - description: Performance data
        in: body
        name: performance
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdatePerformance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseId'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a performance
      tags:
      - performance
  /v1/performances/{performance_id}:
    delete:
      description: API for deleting a performance
      parameters:
      - description: Performance ID
        in: path
        name: performance_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a performance
      tags:
      - performance
    get:
      description: API for retrieving a performance by ID
      parameters:
      - description: Performance ID
        in: path
        name: performance_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Performance'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a performance by ID
      tags:
      - performance
    put:
      consumes:
      - application/json
      description: API for updating a performance
      parameters:
      - description: Performance ID
        in: path
        name: performance_id
        required: true
        type: string
      - description: Performance data
        in: body
        name: performance
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdatePerformance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a performance
      tags:
      - performance
  /v1/terminate_logistics:
    post:
      consumes:
      - application/json
      description: API for terminating logistic record
      parameters:
      - description: Logistic data
        in: body
        name: logistic
        required: true
        schema:
          $ref: '#/definitions/swag.TerminateLogistic'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Terminate logistics
      tags:
      - logistic
  /v1/transactions:
    get:
      description: API for retrieving all transactions with pagination and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of transactions per page
        in: query
        name: limit
        type: integer
      - description: Service Provider
        in: query
        name: provider
        type: string
      - description: Success
        in: query
        name: success
        type: boolean
      - description: Cargo Id
        in: query
        name: cargo_id
        type: string
      - description: Driver Name
        in: query
        name: driver_name
        type: string
      - description: Dispatcher Name
        in: query
        name: dispatcher_name
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllTransResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all transactions
      tags:
      - transaction
    post:
      consumes:
      - application/json
      description: API for creating a new transaction
      parameters:
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateTransaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseId'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a transaction
      tags:
      - transaction
  /v1/transactions/{transaction_id}:
    delete:
      description: API for deleting a transaction
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a transaction
      tags:
      - transaction
    get:
      description: API for retrieving a transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a transaction by ID
      tags:
      - transaction
    put:
      consumes:
      - application/json
      description: API for updating a transaction
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: string
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/swag.CreateUpdateTransaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a transaction
      tags:
      - transaction
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
